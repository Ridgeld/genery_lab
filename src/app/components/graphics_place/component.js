// 'use client';
// import React, { useRef, useEffect, use, useState } from 'react';
// // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ 'utils/kinematics'
// import { solveMechanism } from '../../utils/kinematics'; 
// import styles from './component.module.scss'

// // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
// const CANVAS_WIDTH = 800;
// const CANVAS_HEIGHT = 400;
// const scaleMech = 10; // 1 —Å–º -> 10 px
// const originX = 80;   // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ X
// const originY = CANVAS_HEIGHT * 0.8; // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ Y (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)

// /**
//  * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–≤–µ–Ω–∞.
//  */
// function drawLink(mctx, p, q, color) {
//     mctx.lineWidth = 5; 
//     mctx.strokeStyle = color;
//     mctx.beginPath(); 
//     mctx.moveTo(p.x, p.y); 
//     mctx.lineTo(q.x, q.y); 
//     mctx.stroke();
// }

// /**
//  * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞.
//  */
// function drawMechanismReact(canvas, L0, L1, L2, L3, angle, isStop) {
//     if (!canvas) return;
//     const mctx = canvas.getContext('2d');
    
//     // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
//     mctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
//     mctx.save();
//     mctx.translate(originX, originY); // –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

//     // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
//     mctx.strokeStyle = "#171717ff"; mctx.lineWidth = 1;
//     for (let x = -50; x < CANVAS_WIDTH - originX; x += 50) {
//         mctx.beginPath(); mctx.moveTo(x, -originY); mctx.lineTo(x, CANVAS_HEIGHT - originY); mctx.stroke();
//     }
//     for (let y = -originY; y < CANVAS_HEIGHT - originY; y += 50) {
//         mctx.beginPath(); mctx.moveTo(-originX, y); mctx.lineTo(CANVAS_WIDTH - originX, y); mctx.stroke();
//     }

//     // –†–µ—à–∞–µ–º –∫–∏–Ω–µ–º–∞—Ç–∏–∫—É
//     const sol = solveMechanism(L0, L1, L2, L3, angle);
//     const { A, B, C, D, valid } = sol;

//     if (!valid) {
//         mctx.fillStyle = "red"; 
//         mctx.font = "16px sans-serif";
//         mctx.fillText("–ù–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–∑–≤–µ–Ω—å—è –Ω–µ –¥–æ—Å—Ç–∏–≥–∞—é—Ç)", 10, -360);
//         mctx.restore();
//         return;
//     }

//     // 1. –†–∏—Å—É–µ–º –±–∞–∑—É AD
//     mctx.lineWidth = 3; mctx.strokeStyle = "#fff";
//     mctx.beginPath(); mctx.moveTo(A.x, A.y); mctx.lineTo(D.x, D.y); mctx.stroke();

//     // 2. –†–∏—Å—É–µ–º –∑–≤–µ–Ω—å—è: AB (–∫—Ä–∏–≤–æ—à–∏–ø), BC (—à–∞—Ç—É–Ω), CD
//     drawLink(mctx, A, B, "#1e90ff"); // –°–∏–Ω–∏–π
//     drawLink(mctx, B, C, "#27ae60"); // –ó–µ–ª–µ–Ω—ã–π
//     drawLink(mctx, C, D, "#e67e22"); // –û—Ä–∞–Ω–∂–µ–≤—ã–π

//     // 3. –†–∏—Å—É–µ–º —à–∞—Ä–Ω–∏—Ä—ã (Joints)
//     mctx.fillStyle = "#000"; mctx.strokeStyle = "#fff"; mctx.lineWidth = 4;
//     for (const p of [A, B, C, D]) {
//         mctx.beginPath(); mctx.arc(p.x, p.y, 10, 0, Math.PI * 2); mctx.fill(); mctx.stroke();
//     }
    
//     // 4. –ú–µ—Ç–∫–∏
//     mctx.fillStyle = "#ffffffff"; mctx.font = "20px sans-serif";
//     mctx.fillText("A", A.x - 18, A.y + 30);
//     mctx.fillText("B", B.x - 6, B.y - 19);
//     mctx.fillText("C", C.x + 6, C.y - 10);
//     mctx.fillText("D", D.x + 20, D.y + 18);

//     mctx.restore();
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π
//     return sol;
// }

// /**
//  * React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞.
//  */
// export default function GraphicsPlace({ L0, L1, L2, L3, angle, isStop, onAngleChange }) {


//     useEffect(() => (
//             console.log(isStop)
//     ),[isStop])


//     const canvasRef = useRef(null);
//     const animIdRef = useRef(null);
//     const angleRef = useRef(angle);


//     const omega = 1; // —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–∞–¥/—Å (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—Ä–æ–ø—Å–æ–º)
//     const dt = 1 / 60;
    
//     // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
//     useEffect(() => {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ L-–∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–≥–æ–ª —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
//         if ([L0, L1, L2, L3, angle].every(v => typeof v === 'number' && !isNaN(v))) {
//             drawMechanismReact(canvasRef.current, L0, L1, L2, L3, angle);
//         }
//     }, [L0, L1, L2, L3, angle]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


//         const [canvasSize, setCanvasSize] = useState({ width: 400, height: 400 });
    
//         // üîπ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
//         useEffect(() => {
//             const updateCanvasSize = () => {
//                 const screenWidth = window.innerWidth;
//                 const newWidth = screenWidth > 600 ? screenWidth / 3 : screenWidth - 40;
//                 setCanvasSize({ width: newWidth, height: 400 });
//             };
    
//             updateCanvasSize();
//             window.addEventListener('resize', updateCanvasSize);
//             return () => window.removeEventListener('resize', updateCanvasSize);
//         }, []);


//     useEffect(() => {
//     if (!isStop) {
//       // ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
//       const step = () => {
//         angleRef.current = (angleRef.current + (omega * dt * 180 / Math.PI)) % 360;
//         drawMechanismReact(canvasRef.current, L0, L1, L2, L3, angleRef.current);

//         if (onAngleChange) {
//           onAngleChange(angleRef.current);
//         }

//         animIdRef.current = requestAnimationFrame(step);
//       };
//       animIdRef.current = requestAnimationFrame(step);
//     } else {
//       // ‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
//       if (animIdRef.current) {
//         cancelAnimationFrame(animIdRef.current);
//         animIdRef.current = null;
//       }
//     }

//     // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//     return () => {
//       if (animIdRef.current) {
//         cancelAnimationFrame(animIdRef.current);
//         animIdRef.current = null;
//       }
//     };
//   }, [isStop, L0, L1, L2, L3]);

//     return (
//         <canvas 
//             ref={canvasRef} 
//             className={styles['graphic']}
//             style={{
//                     width: `${canvasSize.width}px`,
//                     height: `${canvasSize.height}px`,
//                     // border: '1px solid #ccc',
//                     display: 'block',
//                     margin: '0 auto'
//             }}
//         />
//     );
// }
'use client';
import React, { useRef, useEffect, useState } from 'react';
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ 'utils/kinematics'
// –í —Ä–∞–±–æ—á–µ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:
import { solveMechanism } from '../../utils/kinematics'; 
import styles from './component.module.scss'

// –ò–°–•–û–î–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ (–±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ canvasSize)
// –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏, –Ω–æ –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, 
// –ø–æ—Å–∫–æ–ª—å–∫—É CANVAS_HEIGHT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ originY.
const CONST_CANVAS_WIDTH = 800;
const CONST_CANVAS_HEIGHT = 400;

const scaleMech = 10; // 1 —Å–º -> 10 px

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–≤–µ–Ω–∞.
 */
function drawLink(mctx, p, q, color) {
    mctx.lineWidth = 5; 
    mctx.strokeStyle = color;
    mctx.beginPath(); 
    mctx.moveTo(p.x, p.y); 
    mctx.lineTo(q.x, q.y); 
    mctx.stroke();
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã canvas –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
 */
function drawMechanismReact(canvas, L0, L1, L2, L3, angle, actualWidth, actualHeight) {
    if (!canvas) return;
    const mctx = canvas.getContext('2d');
    
    // --- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ ---
    const originX = actualWidth * 0.1; ¬† // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ X (10% –æ—Ç —à–∏—Ä–∏–Ω—ã)
    const originY = actualHeight * 0.8; // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ Y (80% –æ—Ç –≤—ã—Å–æ—Ç—ã)
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –±—É—Ñ–µ—Ä–∞ Canvas
    mctx.canvas.width = actualWidth;
    mctx.canvas.height = actualHeight;
    // --- –ö–û–ù–ï–¶ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í ---

    // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    mctx.clearRect(0, 0, actualWidth, actualHeight);
    mctx.save();
    mctx.translate(originX, originY); // –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã)
    mctx.strokeStyle = "#171717ff"; mctx.lineWidth = 1;
    // –û—Å—å X
    for (let x = 0; x < actualWidth - originX; x += 50) {
        mctx.beginPath(); mctx.moveTo(x, -originY); mctx.lineTo(x, actualHeight - originY); mctx.stroke();
    }
    // –û—Å—å Y
    for (let y = -originY; y < actualHeight - originY; y += 50) {
        mctx.beginPath(); mctx.moveTo(-originX, y); mctx.lineTo(actualWidth - originX, y); mctx.stroke();
    }

    // –†–µ—à–∞–µ–º –∫–∏–Ω–µ–º–∞—Ç–∏–∫—É
    const sol = solveMechanism(L0, L1, L2, L3, angle);
    const { A, B, C, D, valid } = sol;

    if (!valid) {
        mctx.fillStyle = "red"; 
        mctx.font = "16px sans-serif";
        mctx.fillText("–ù–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–∑–≤–µ–Ω—å—è –Ω–µ –¥–æ—Å—Ç–∏–≥–∞—é—Ç)", 10, -originY + 20);
        mctx.restore();
        return;
    }

    // 1. –†–∏—Å—É–µ–º –±–∞–∑—É AD
    mctx.lineWidth = 3; mctx.strokeStyle = "#fff";
    mctx.beginPath(); mctx.moveTo(A.x, A.y); mctx.lineTo(D.x, D.y); mctx.stroke();

    // 2. –†–∏—Å—É–µ–º –∑–≤–µ–Ω—å—è: AB (–∫—Ä–∏–≤–æ—à–∏–ø), BC (—à–∞—Ç—É–Ω), CD
    drawLink(mctx, A, B, "#1e90ff"); // –°–∏–Ω–∏–π
    drawLink(mctx, B, C, "#27ae60"); // –ó–µ–ª–µ–Ω—ã–π
    drawLink(mctx, C, D, "#e67e22"); // –û—Ä–∞–Ω–∂–µ–≤—ã–π

    // 3. –†–∏—Å—É–µ–º —à–∞—Ä–Ω–∏—Ä—ã (Joints)
    mctx.fillStyle = "#000"; mctx.strokeStyle = "#fff"; mctx.lineWidth = 4;
    for (const p of [A, B, C, D]) {
        mctx.beginPath(); mctx.arc(p.x, p.y, 10, 0, Math.PI * 2); mctx.fill(); mctx.stroke();
    }
    
    // 4. –ú–µ—Ç–∫–∏
    mctx.fillStyle = "#ffffffff"; mctx.font = "20px sans-serif";
    mctx.fillText("A", A.x - 18, A.y + 30);
    mctx.fillText("B", B.x - 6, B.y - 19);
    mctx.fillText("C", C.x + 6, C.y - 10);
    mctx.fillText("D", D.x + 20, D.y + 18);

    mctx.restore();
    return sol;
}

/**
 * React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞.
 */
export default function GraphicsPlace({ L0, L1, L2, L3, angle, isStop, onAngleChange }) {
    const canvasRef = useRef(null);
    const animIdRef = useRef(null);
    const angleRef = useRef(angle);

    const omega = 1; // —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–∞–¥/—Å
    const dt = 1 / 60;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ—Ç—ã
    const [canvasSize, setCanvasSize] = useState({ width: CONST_CANVAS_WIDTH, height: CONST_CANVAS_HEIGHT });
    
    // üîπ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    useEffect(() => {
        const updateCanvasSize = () => {
            // –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –æ–∫–Ω–∞
            const containerWidth = canvasRef.current.parentElement.clientWidth;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 90% –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 800px
            const newWidth = Math.min(containerWidth, 800); 
            
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∫ —ç–∫—Ä–∞–Ω—É:
            // const screenWidth = window.innerWidth;
            // const newWidth = screenWidth > 600 ? screenWidth / 3 : screenWidth - 40;
            
            setCanvasSize(prev => ({ width: newWidth, height: CONST_CANVAS_HEIGHT }));
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        updateCanvasSize();
        window.addEventListener('resize', updateCanvasSize);
        return () => window.removeEventListener('resize', updateCanvasSize);
    }, []); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ canvasSize –∏–ª–∏ –ª—é–±—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if ([L0, L1, L2, L3, angle].every(v => typeof v === 'number' && !isNaN(v))) {
            drawMechanismReact(
                canvasRef.current, 
                L0, L1, L2, L3, angle, 
                canvasSize.width, canvasSize.height // –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            );
        }
    }, [L0, L1, L2, L3, angle, canvasSize.width, canvasSize.height]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞)
    useEffect(() => {
        if (!isStop) {
          // ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
          const step = () => {
            // ... –ª–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ ...
            angleRef.current = (angleRef.current + (omega * dt * 180 / Math.PI)) % 360;
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            drawMechanismReact(
                canvasRef.current, 
                L0, L1, L2, L3, angleRef.current, 
                canvasSize.width, canvasSize.height
            );

            if (onAngleChange) {
              onAngleChange(angleRef.current);
            }

            animIdRef.current = requestAnimationFrame(step);
          };
          animIdRef.current = requestAnimationFrame(step);
        } else {
          // ‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
          if (animIdRef.current) {
            cancelAnimationFrame(animIdRef.current);
            animIdRef.current = null;
          }
        }

        // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
          if (animIdRef.current) {
            cancelAnimationFrame(animIdRef.current);
            animIdRef.current = null;
          }
        };
    }, [isStop, L0, L1, L2, L3, canvasSize.width, canvasSize.height]);


    return (
        <canvas 
            ref={canvasRef} 
            // üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã width/height –∏–∑ —Å—Ç–µ–π—Ç–∞ canvasSize (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
            width={canvasSize.width} 
            height={canvasSize.height}
            className={styles['graphic']}
            style={{
                // CSS width/height —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                // –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 100% –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
                // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ px.
                width: `${canvasSize.width}px`, 
                height: `${canvasSize.height}px`,
                display: 'block',
                margin: '0 auto'
            }}
        />
    );
}